# type: ignore
# flake8: noqa

# Copyright (c) Facebook, Inc. and its affiliates.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
"""
Mostly copy-paste from timm library.
https://github.com/rwightman/pytorch-image-models/blob/master/timm/models/vision_transformer.py
"""
import math
import warnings
from functools import partial

import torch
import torch.nn as nn
from torch import Tensor
from torch.nn.functional import mse_loss, sigmoid
from torch.optim import Adam
from tqdm import tqdm
import matplotlib.pyplot as plt

from first_breaks._pytorch.tomo.models import LA_ELU


def trunc_normal_(tensor, mean=0.0, std=1.0, a=-2.0, b=2.0):
    # type: (Tensor, float, float, float, float) -> Tensor
    return _no_grad_trunc_normal_(tensor, mean, std, a, b)


def _no_grad_trunc_normal_(tensor, mean, std, a, b):
    # Cut & paste from PyTorch official master until it's in a few official releases - RW
    # Method based on https://people.sc.fsu.edu/~jburkardt/presentations/truncated_normal.pdf
    def norm_cdf(x):
        # Computes standard normal cumulative distribution function
        return (1.0 + math.erf(x / math.sqrt(2.0))) / 2.0

    if (mean < a - 2 * std) or (mean > b + 2 * std):
        warnings.warn(
            "mean is more than 2 std from [a, b] in nn.init.trunc_normal_. "
            "The distribution of values may be incorrect.",
            stacklevel=2,
        )

    with torch.no_grad():
        # Values are generated by using a truncated uniform distribution and
        # then using the inverse CDF for the normal distribution.
        # Get upper and lower cdf values
        l = norm_cdf((a - mean) / std)
        u = norm_cdf((b - mean) / std)

        # Uniformly fill tensor with values from [l, u], then translate to
        # [2l-1, 2u-1].
        tensor.uniform_(2 * l - 1, 2 * u - 1)

        # Use inverse cdf transform for normal distribution to get truncated
        # standard normal
        tensor.erfinv_()

        # Transform to proper mean, std
        tensor.mul_(std * math.sqrt(2.0))
        tensor.add_(mean)

        # Clamp to ensure it's in the proper range
        tensor.clamp_(min=a, max=b)
        return tensor


def drop_path(x, drop_prob: float = 0.0, training: bool = False):
    if drop_prob == 0.0 or not training:
        return x
    keep_prob = 1 - drop_prob
    shape = (x.shape[0],) + (1,) * (x.ndim - 1)  # work with diff dim tensors, not just 2D ConvNets
    random_tensor = keep_prob + torch.rand(shape, dtype=x.dtype, device=x.device)
    random_tensor.floor_()  # binarize
    output = x.div(keep_prob) * random_tensor
    return output


class DropPath(nn.Module):
    """Drop paths (Stochastic Depth) per sample  (when applied in main path of residual blocks)."""

    def __init__(self, drop_prob=None):
        super(DropPath, self).__init__()
        self.drop_prob = drop_prob

    def forward(self, x):
        return drop_path(x, self.drop_prob, self.training)


ACT_CLASS = lambda dim: LA_ELU(feat_dim=dim, alpha_init=0.1)
# ACT_CLASS = lambda dim: nn.Mish()
NORM_CLASS = lambda *args, **kwargs: nn.LayerNorm(*args, **kwargs)
# NORM_CLASS = lambda *args, **kwargs: nn.Identity()


class Mlp(nn.Module):
    def __init__(self, in_features, hidden_features=None, out_features=None, act_layer=ACT_CLASS, drop=0.0):
        super().__init__()
        out_features = out_features or in_features
        hidden_features = hidden_features or in_features
        self.fc1 = nn.Linear(in_features, hidden_features)
        self.act = act_layer(hidden_features)
        self.fc2 = nn.Linear(hidden_features, out_features)
        self.drop = nn.Dropout(drop)

    def forward(self, x):
        x = self.fc1(x)
        x = self.act(x)
        x = self.drop(x)
        x = self.fc2(x)
        x = self.drop(x)
        return x


class Attention(nn.Module):
    def __init__(self, dim, num_heads=8, qkv_bias=False, qk_scale=None, attn_drop=0.0, proj_drop=0.0):
        super().__init__()
        self.num_heads = num_heads
        head_dim = dim // num_heads
        self.scale = qk_scale or head_dim**-0.5

        self.qkv = nn.Linear(dim, dim * 3, bias=qkv_bias)
        self.attn_drop = nn.Dropout(attn_drop)
        self.proj = nn.Linear(dim, dim)
        self.proj_drop = nn.Dropout(proj_drop)

    def forward(self, x):
        B, N, C = x.shape
        qkv = self.qkv(x).reshape(B, N, 3, self.num_heads, C // self.num_heads).permute(2, 0, 3, 1, 4)
        q, k, v = qkv[0], qkv[1], qkv[2]

        attn = (q @ k.transpose(-2, -1)) * self.scale
        attn = attn.softmax(dim=-1)
        attn = self.attn_drop(attn)

        x = (attn @ v).transpose(1, 2).reshape(B, N, C)
        x = self.proj(x)
        x = self.proj_drop(x)
        return x, attn


class Block(nn.Module):
    def __init__(
        self,
        dim,
        num_heads,
        mlp_ratio=4.0,
        qkv_bias=False,
        qk_scale=None,
        drop=0.0,
        attn_drop=0.0,
        drop_path=0.0,
        act_layer=ACT_CLASS,
        norm_layer=NORM_CLASS,
    ):
        super().__init__()
        self.norm1 = norm_layer(dim)
        self.attn = Attention(
            dim, num_heads=num_heads, qkv_bias=qkv_bias, qk_scale=qk_scale, attn_drop=attn_drop, proj_drop=drop
        )
        self.drop_path = DropPath(drop_path) if drop_path > 0.0 else nn.Identity()
        self.norm2 = norm_layer(dim)
        mlp_hidden_dim = int(dim * mlp_ratio)
        self.mlp = Mlp(in_features=dim, hidden_features=mlp_hidden_dim, act_layer=act_layer, drop=drop)

    def forward(self, x, return_attention: bool = False):
        y, attn = self.attn(self.norm1(x))
        if return_attention:
            return attn
        x = x + self.drop_path(y)
        x = x + self.drop_path(self.mlp(self.norm2(x)))
        return x


class EmbedLayer(nn.Module):
    def __init__(self, in_chans, embed_dim):
        super().__init__()

        self.embed_dim = embed_dim

        self.embeds = nn.ModuleList([nn.Linear(in_chans, embed_dim) for _ in range(in_chans)])

    def forward(self, x):
        bs, in_chans = x.shape

        x = torch.cat([layer(x).view(bs, 1, -1) for layer in self.embeds], dim=1)

        return x


class TomoTransformer(nn.Module):
    """Vision Transformer"""

    def __init__(
        self,
        in_chans,
        embed_dim,
        depth,
        num_heads,
        mlp_ratio,
        qkv_bias=False,
        qk_scale=None,
        drop_rate=0.0,
        attn_drop_rate=0.0,
        drop_path_rate=0.0,
        act_layer=ACT_CLASS,
        norm_layer=partial(NORM_CLASS, eps=1e-6)
    ):
        super().__init__()

        # self.input_layer = nn.Linear(1, embed_dim)
        # self.input_layer = nn.Linear(in_chans, embed_dim)
        self.input_layer = EmbedLayer(in_chans, embed_dim)

        self.time_token = nn.Parameter(torch.zeros(1, 1, embed_dim))
        self.velocity_token = nn.Parameter(torch.zeros(1, 1, embed_dim))
        self.pos_embed = nn.Parameter(torch.zeros(1, in_chans + 2, embed_dim))
        self.pos_drop = nn.Dropout(p=drop_rate)

        dpr = [x.item() for x in torch.linspace(0, drop_path_rate, depth)]  # stochastic depth decay rule
        self.blocks = nn.ModuleList(
            [
                Block(
                    dim=embed_dim,
                    num_heads=num_heads,
                    mlp_ratio=mlp_ratio,
                    qkv_bias=qkv_bias,
                    qk_scale=qk_scale,
                    drop=drop_rate,
                    attn_drop=attn_drop_rate,
                    drop_path=dpr[i],
                    norm_layer=norm_layer,
                )
                for i in range(depth)
            ]
        )
        self.norm = norm_layer(embed_dim)

        self.time_head = nn.Sequential(nn.Linear(embed_dim, embed_dim), act_layer(embed_dim), nn.Linear(embed_dim, 1))
        self.velocity_head = nn.Sequential(nn.Linear(embed_dim, embed_dim), act_layer(embed_dim), nn.Linear(embed_dim, 1))

        trunc_normal_(self.pos_embed, std=0.02)
        trunc_normal_(self.time_token, std=0.02)
        trunc_normal_(self.velocity_token, std=0.02)
        self.apply(self._init_weights)

    def _init_weights(self, m):
        if isinstance(m, nn.Linear):
            trunc_normal_(m.weight, std=0.08)
            if isinstance(m, nn.Linear) and m.bias is not None:
                nn.init.constant_(m.bias, 0)
        elif isinstance(m, nn.LayerNorm):
            nn.init.constant_(m.bias, 0)
            nn.init.constant_(m.weight, 1.0)

    def prepare_tokens(self, x):
        bs, dim = x.shape
        # assert dim == 1, "Only scalar coordinates are available"

        time_tokens = self.time_token.expand(bs, -1, -1)
        velocity_tokens = self.velocity_token.expand(bs, -1, -1)

        x = self.input_layer(x)

        x = torch.cat([time_tokens, velocity_tokens, x], dim=1)

        # add positional encoding to each token
        x = x + self.pos_embed.expand(bs, -1, -1)

        return self.pos_drop(x)

    # def prepare_tokens(self, x):
    #     bs, _, dim = x.shape
    #     assert dim == 1, "Only scalar coordinates are available"
    #
    #     time_tokens = self.time_token.expand(bs, -1, -1)
    #     velocity_tokens = self.velocity_token.expand(bs, -1, -1)
    #
    #     x = self.input_layer(x)
    #
    #     x = torch.cat([time_tokens, velocity_tokens, x], dim=1)
    #
    #     # add positional encoding to each token
    #     x = x + self.pos_embed.expand(bs, -1, -1)
    #
    #     return self.pos_drop(x)

    def forward(self, x):
        x = self.prepare_tokens(x)
        for blk in self.blocks:
            x = blk(x)
        x = self.norm(x)

        time = self.time_head(x[:, 0])
        velocity = self.velocity_head(x[:, 1])

        return time, velocity


def check_overfit():
    device = 'cuda' if torch.cuda.is_available() else 'cpu'
    d_min = 0
    d_max = 5
    v_min = 0
    v_max = 2
    bs = 6000
    in_chans = 4
    lr = 5e-3
    num_epochs = 1000

    points = (d_max - d_min) * torch.rand((bs, in_chans), device=device) + d_min
    targets = (v_max - v_min) * torch.rand((bs, 1), device=device) + v_min

    model = TomoTransformer(in_chans=in_chans, depth=4, embed_dim=100, num_heads=5, mlp_ratio=2, qkv_bias=True).to(device)

    optimizer = Adam(model.parameters(), lr)
    criterion = nn.SmoothL1Loss(0.001)

    pbar = tqdm(range(num_epochs))

    loss_list = []
    for _ in pbar:
        optimizer.zero_grad()
        data = points.clone().detach().requires_grad_(True)
        preds, _ = model(data)
        preds = (v_max - v_min) * sigmoid(preds) + v_min
        loss = criterion(preds, targets)
        loss.backward()
        optimizer.step()
        pbar.set_postfix_str(loss.item())
        loss_list.append(loss.item())

    if isinstance(model.time_head[1], LA_ELU):
        print(model.time_head[1].alpha)

    plt.plot(loss_list)
    plt.show()


if __name__ == "__main__":
    check_overfit()
    # data = torch.rand((10, 4, 1))
    # model = TomoTransformer(in_chans=4, depth=10, embed_dim=20, num_heads=4, mlp_ratio=2)
    # preds = model(data)

    # data = torch.rand((10, 4))
    # model = TomoTransformer(in_chans=4, depth=10, embed_dim=20, num_heads=4, mlp_ratio=2)
    # preds = model(data)

    # print(preds)


