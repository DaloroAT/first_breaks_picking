name: Release

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

jobs:
  autotag:
    name: Create tag if the commit has new version implemented
    runs-on: ubuntu-latest
    outputs:
      tagcreated: ${{ steps.autotag.outputs.tagcreated }}
      tagname: ${{ steps.autotag.outputs.tagname }}
    steps:
      - uses: actions/checkout@v3

      - name: Autotag
        id: autotag
        uses: butlerlogic/action-autotag@1.1.1
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          strategy: regex
          root: "first_breaks/VERSION"
          regex_pattern: >
            (\d+\.\d+\.\d+[a-z]?)
          tag_prefix: "v"

  publish_assets:
    name: Build and publish assets
    needs: autotag
    if: ${{ needs.autotag.outputs.tagcreated == 'yes' }}
    runs-on: windows-latest
    strategy:
      matrix:
        type: [ 'CPU', 'GPU' ]
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: "3.8.0"
    - name: Check versions
      run: |
        pip install tomli==2.0.1
        python checks.py
    - name: Setup for ${{ matrix.type }} Build
      run: |
        if (${{ matrix.type }} -eq 'GPU') {
          Move-Item -Path .\pyproject_gpu.toml -Destination .\pyproject.toml -Force
        }
    - name: Install Builder
      run: |
        python -m pip install briefcase
    - name: ${{ matrix.type }} - Create Package
      run: |
        briefcase create
    - name: ${{ matrix.type }} - Build Package
      run: |
        briefcase build
    - name: ${{ matrix.type }} - Create Installer MSI
      run: |
        briefcase package --adhoc-sign --packaging-format msi
    - name: ${{ matrix.type }} - Create Installer ZIP
      run: |
        briefcase package --adhoc-sign --packaging-format zip
#    - name: Get version from file
#      id: version
#      run: echo "::set-output name=version::v$(cat first_breaks/VERSION)"
    - name: ${{ matrix.type }} - Upload assets to Release
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ needs.autotag.outputs.tagname }}
#        tag: ${{ steps.version.outputs.version }}
        file_glob: true
        file: dist/*
